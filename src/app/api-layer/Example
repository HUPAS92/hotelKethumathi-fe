import HttpServiceConfig from '../configs/htttp-service-config';

class ExampleService {
  get = (queryParam = {}, config = {}) => {
    const queryValueArray = Object.keys(queryParam).reduce((arr, key) => {
      const valueObj = queryParam[key];
      if ((valueObj || valueObj === 0) && valueObj !== '') {
        arr.push(`${key}=${valueObj}`);
      }
      return arr;
    }, []);

    const queryPath = queryValueArray.join('&');

    return new Promise((resolve, reject) => {
      HttpServiceConfig.get(`/get?${queryPath}`, config)
        .then((data) => {
          resolve(data);
        })
        .catch((error) => {
          reject(error);
        });
    });
  };

  create = (req, headers = {}) => {
    const formattedReq = {};
    return new Promise((resolve, reject) => {
      HttpServiceConfig.post('/post', formattedReq, headers)
        .then((data) => {
          resolve(data);
        })
        .catch((error) => {
          reject(error);
        });
    });
  };

  update = (id, req, headers = {}) => {
    const formattedReq = {};
    return new Promise((resolve, reject) => {
      HttpServiceConfig.put(`/update/${id}`, formattedReq, headers)
        .then((data) => {
          resolve(data);
        })
        .catch((error) => {
          reject(error);
        });
    });
  };

  getById = (id, headers = {}) => {
    return new Promise((resolve, reject) => {
      HttpServiceConfig.get(`/getbyid/${id}`, headers)
        .then((data) => {
          resolve(data);
        })
        .catch((error) => {
          reject(error);
        });
    });
  };
}

export default new ExampleService();
